<command>
<name>list ossi typical location data</name>
<description>Given a location - get the typical attributes that we may need to work with from the various tables typically joined</description>

<argument name="wh_id" required="yes" datatype="string">wh_id</argument>
<argument name="stoloc" required="yes" datatype="string">location</argument>
<argument name="uc_out_prefix" required="yes" datatype="string">prefix to use for the published columns</argument>
<argument name="uc_cache_results" required="yes" datatype="string">1 or 0.  default is 1.  Caching is within the session variable</argument>

<type>Local Syntax</type>
<local-syntax>
<![CDATA[

/*
 * Revision Log
 * 2021-11-30 saad.ahmad 12608 - Initial
 */

publish data
where wh_id = nvl(@wh_id, @@WH_ID )
and res = null
and uc_got_from_session_cache = 0
|
publish data
where uc_cache_results = nvl(@uc_cache_results, 1 )
and uc_cache_sess_var = 'list_ossi_typical_location_data_' || @stoloc || '_' || @wh_id
|
publish data
where col_mov_zone_cod        = @uc_out_prefix || 'mov_zone_cod'
and   col_mov_zone_bldg_id    = @uc_out_prefix || 'mov_zone_bldg_id'
and   col_sto_zone_cod        = @uc_out_prefix || 'sto_zone_cod'
and   col_sto_zone_bldg_id    = @uc_out_prefix || 'sto_zone_bldg_id'
and   col_pck_zone_cod        = @uc_out_prefix || 'pck_zone_cod'
and   col_pck_zone_bldg_id    = @uc_out_prefix || 'pck_zone_bldg_id'
and   col_loc_typ             = @uc_out_prefix || 'loc_typ'
and   col_loc_typ_cat         = @uc_out_prefix || 'loc_typ_cat'
and   col_adjflg              = @uc_out_prefix || 'adjflg'
and   col_fwiflg              = @uc_out_prefix || 'fwiflg'
and   col_pdflg               = @uc_out_prefix || 'pdflg'
and   col_praflg              = @uc_out_prefix || 'praflg'
and   col_sigflg              = @uc_out_prefix || 'sigflg'
and   col_shpflg              = @uc_out_prefix || 'shpflg'
and   col_rdtflg              = @uc_out_prefix || 'rdtflg'
and   col_stgflg              = @uc_out_prefix || 'stgflg'
and   col_wipflg              = @uc_out_prefix || 'wipflg'
and   col_expflg              = @uc_out_prefix || 'expflg'
and   col_ftl_flg             = @uc_out_prefix || 'ftl_flg'
and   col_lpn_mix_flg         = @uc_out_prefix || 'lpn_mix_flg'
|
{
    if ( @uc_cache_results = 1 )
    {
        publish data
        where uc_my_res = ossi__sess_var ( @uc_cache_sess_var, '', 'Y' )
        |
        if ( @uc_my_res is not null )
        {
            [[
            StringReader rr = new StringReader(uc_my_res);
            res = com.redprairie.moca.client.JSONResultsDecoder.decode(rr);
            [res:res]
            ]]
            catch(@?) /* Catching errors so that if we dont get result - still continue */
            |
            if ( @? = 0 )
                publish data
                where res = @res
                and uc_got_from_session_cache = 1
        }
    }
    |
    /*
     * if for whatever reason we 
     */
    if ( @uc_got_from_session_cache != 1 )
    {
        [
        select mov_zone.mov_zone_cod,
               mov_zone.bldg_id,
               sto_zone.sto_zone_cod,
               sto_zone.bldg_id,
               pck_zone.pck_zone_cod,
               pck_zone.bldg_id,
               loc_typ.loc_typ,
               loc_typ.loc_typ_cat,
               loc_typ.adjflg,
               loc_typ.fwiflg,
               loc_typ.pdflg,
               loc_typ.praflg,
               loc_typ.sigflg,
               loc_typ.shpflg,
               loc_typ.rdtflg,
               loc_typ.stgflg,
               loc_typ.wipflg,
               loc_typ.expflg,
               loc_typ.ftl_flg,
               loc_typ.lpn_mix_flg
        from locmst
             left outer join mov_zone on mov_zone.mov_zone_id = locmst.mov_zone_id
             left outer join loc_typ on loc_typ.loc_typ_id = locmst.loc_typ_id
             left outer join pck_zone on pck_zone.pck_zone_id = locmst.pck_zone_id
             left outer join sto_zone on sto_zone.sto_zone_id = locmst.sto_zone_id
        where locmst.wh_id = @wh_id
        and locmst.stoloc = @stoloc
        ]
        catch (-1403,510)
        >> res
    }
    |
    if ( @res is not null and rowcount(@res) > 0 )
    {
        if ( @uc_cache_results = 1 )
        {
            /*
             * First encode this into a JSON and save that in our session variable
             */
             [[
             StringWriter out = new StringWriter();
             com.redprairie.moca.client.JSONResultsEncoder.writeResults(res, out);
             [uc_encoded_res:out.toString()]
             ]]
             catch(@?) /* Catching errors so that if cannot cache we dont have an issue */
             |
             if ( @? = 0 )
             {
                 save session variable
                 where name = @uc_cache_sess_var
                 and value = @uc_encoded_res
             }
        }
         ;
         publish data combination
         where res = @res
         |
         /*
          * This will return the final data with columns we want
          */
         execute server command
         where inline = 1
         and cmd = " publish data"
                || " where uc_got_from_session_cache = @uc_got_from_session_cache"
                || " and " || @col_mov_zone_cod     || ' = @mov_zone_cod'
                || " and " || @col_mov_zone_bldg_id || ' = @mov_zone_bldg_id'
                || " and " || @col_sto_zone_cod     || ' = @sto_zone_cod'
                || " and " || @col_sto_zone_bldg_id || ' = @sto_zone_bldg_id'
                || " and " || @col_pck_zone_cod     || ' = @pck_zone_cod'
                || " and " || @col_pck_zone_bldg_id || ' = @pck_zone_bldg_id'
                || " and " || @col_loc_typ          || ' = @loc_typ'
                || " and " || @col_loc_typ_cat      || ' = @loc_typ_cat'
                || " and " || @col_adjflg           || ' = @adjflg'
                || " and " || @col_fwiflg           || ' = @fwiflg'
                || " and " || @col_pdflg            || ' = @pdflg'
                || " and " || @col_praflg           || ' = @praflg'
                || " and " || @col_sigflg           || ' = @sigflg'
                || " and " || @col_shpflg           || ' = @shpflg'
                || " and " || @col_rdtflg           || ' = @rdtflg'
                || " and " || @col_stgflg           || ' = @stgflg'
                || " and " || @col_wipflg           || ' = @wipflg'
                || " and " || @col_expflg           || ' = @expflg'
                || " and " || @col_ftl_flg          || ' = @ftl_flg'
                || " and " || @col_lpn_mix_flg      || ' = @lpn_mix_flg'
    }
}


]]>
</local-syntax>
<documentation>
<remarks>
<![CDATA[
    <p>
    This component is used to return typical location attributes given a location.  It will optioinally prefix the output columns as well
    so that we can call this component for various locations and name the output columns per our requirements.
    All output column names are thus variable.  
    This will put results in session cache so repeated calls within same session for same location are fine
    </p>
]]>
</remarks>


<retrows>1 or 0</retrows>
<retcol name="uc_got_from_session_cache" type="integer">1 or 0.  1 means we got from session cache</retcol>
<retcol name="mov_zone_cod" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="mov_zone_bldg_id" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="sto_zone_cod" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="sto_zone_bldg_id" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="pck_zone_cod" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="pck_zone_bldg_id" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="loc_typ" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="loc_typ_cat" type="string">output column will have uc_out_prefix prefix.</retcol>
<retcol name="adjflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="fwiflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="pdflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="praflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="sigflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="shpflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="rdtflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="stgflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="wipflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="expflg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="ftl_flg" type="integer">output column will have uc_out_prefix prefix.</retcol>
<retcol name="lpn_mix_flg" type="integer">output column will have uc_out_prefix prefix.</retcol>

<example>
</example>

<exception value="eOK">Normal successful completion</exception>

<seealso cref="move inventory"></seealso>


</documentation>
</command>

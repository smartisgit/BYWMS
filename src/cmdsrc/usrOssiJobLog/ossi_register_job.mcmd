<command>
<name>ossi register_job</name>
<description>FUNCTION: Register a new job in var_job_log table</description>
<type>Local Syntax</type>
<local-syntax>
<![CDATA[
/*
 * Change Log
 * Initial Check In
 * Kent.Zhao - 10731
 */
 
publish data
where uc_ossi_job_id = @moca_farg1
and   uc_ossi_data   = @moca_farg2
and   uc_ossi_who    = nvl ( @moca_farg3, @uc_ossi_who )
and   uc_ossi_job_seq = nextval ( 'uc_ossi_job_seq' )
and   uc_ossi_module_id = '%'
and   uc_ossi_action_id = '%'
and   uc_ossi_module_seq = 0
and   uc_ossi_action_seq = 0
|
{
   create ossi job log
   ;
   publish data where ret = @uc_ossi_job_seq
}

]]>
</local-syntax>

<argument name="moca_farg1" required="yes" datatype="string">Name of the job</argument>
<argument name="moca_farg2" required="no" datatype="string">Data for uc_ossi_data field</argument>
<argument name="moca_farg3" required="no" datatype="string">
Data for uc_ossi_who field.  If not passed in, pick uc_ossi_who from stack
</argument>

<documentation>
<remarks>
<![CDATA[
<p>

This component is used to register a new job into the var_job_log table.

Overview
========
var_job_log table can be used to track the progress of a long running task with several steps and sub-steps.  It
views the whole execution as a "job".  It allows for execution of several "modules" within the job and each
"module" can have several "actions".  Using the provided components a long running task can push its information
to this table so that we can see how far along it is and how long each step is taking.

It is used as follows:
1. Call "usr_ossi__register_job" to get a new job#.  It also adds a row to var_job_log table for the whole job.
2. To indicate start of a module call the "usr_ossi__register_module" component.  
3. Then to indicate start of an action  call the "usr_ossi__register_action" function.
4. When done with an action, call test usr ossi complete job log.  To indicate error pass in uc_ossi_err_code and uc_ossi_err_descr
5. When done with a module, call test usr ossi complete job log.  To indicate error pass in uc_ossi_err_code and uc_ossi_err_descr
6. When done with the job, call test usr ossi complete job.  To indicate error pass in uc_ossi_err_code and uc_ossi_err_descr

try/catch should be used to handle errors.

</p>
]]>
</remarks>

<retrows>MOCA Function - So one row is returned</retrows>

<exception value="eOK">The command completed successfully.</exception>
<exception value="510">If variable was not passed and no default was passed.</exception>

<seealso cref="test usr ossi create job log"></seealso>
<seealso cref="test usr ossi change job log"></seealso>
<seealso cref="test usr ossi complete job "></seealso>
<seealso cref="test usr ossi complete job log"></seealso>
<seealso cref="usr_ossi register_action"></seealso>
<seealso cref="usr_ossi register_module"></seealso>
<seealso cref="usr_ossi register_job"></seealso>
<seealso cref="test usr ossi list job log"></seealso>

</documentation>

</command>
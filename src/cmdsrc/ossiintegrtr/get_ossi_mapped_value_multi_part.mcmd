<command>
<name>get ossi mapped value multi part</name>
<description>Get mapped value from here to receipient.</description>
<type>Local Syntax</type>

<argument name="sys_id" required="yes" datatype="string">System for which we need to do the conversion</argument>
<argument name="value" required="yes" datatype="string">Current value</argument>
<argument name="map_type" required="yes" datatype="string">Which Map to use</argument>
<argument name="inhibit_default" required="no" datatype="string">Do not use default value, default 0</argument>
<argument name="wh_id" required="no" datatype="string"></argument>

<local-syntax>
<![CDATA[
/*
 * Change Log
 * Initial Check In
 * Kent.Zhao - 10731
 */
 
publish data 
where sys_id = @sys_id
and   value  = @value
and   map_type = @map_type
and   inhibit_default = nvl ( @inhibit_default, '0' )
and   wh_id = nvl(nvl(@wh_id,@whse_id),'----')
|
publish data
where polcod = ossi__get_polcod_by_sys_id(@sys_id)
|
publish data
where uc_cache_name = 'get_ossi_mapped_value_multi_part' || @sys_id || '_' || @wh_id || '_' || @map_type || '_' || @value || '_' || @inhibit_default
|
{
   get ossi data from cache
   catch (-1403,510)
   |
   if ( @? = 0 )
   {
      publish data
      where mapped_value = @uc_cache_value
   }   
   else
   {
      [select rtstr1 mapped_value,
              rtnum2 exec_cmd_flg
      from
      (
         select y.*
         from
         (
            /*
             * This first part of the query is saying that when we have a wild card match then polval that has 
             * the % later in the match wins.  Decode in the orde rby is saying that if polval does not have wild card
             * at all, that wins all the time.
             */
            select 1 ord, xx.* 
            from
            (
               select yy1.*
               from
               (
                  select rtstr1, 
                         rtnum2
                  from poldat_view pv 
                  where polcod = @polcod
                  and polvar = @map_type
                  and nvl(@value,'----') like polval
                  and rtnum1 = 1
                  and wh_id = @wh_id
                  and rownum < 99999
                  order by decode ( instr(polval, '%'), 0, 9999, instr(polval, '%')) desc
               ) yy1
               where rownum < 2
            ) xx
            union all
            select 2 ord,
                   rtstr1,
                   rtnum2
            from poldat_view pv 
            where polcod = @polcod
            and polvar = @map_type
            and polval = '%'
            and rtnum1 = 1
            and @inhibit_default = '0'
            and wh_id = @wh_id
            union all
            select 3 ord,
                   @value,
                   0 rtnum2
            from dual
            where @inhibit_default = '0'
         ) y
         where rownum < 999999
         order by 1
      ) x
      where rownum < 2
      ]
      catch (-1403,510)
      |
      if ( @? != 0 )
      {
         publish data where mapped_value = ''
      }
      /* This allows us to use functions like substr */
      else if (@exec_cmd_flg = 1)
      {
         execute server command 
           where cmd = 'publish data where mapped_value = ' || @mapped_value
      }
      /* Replace @var with the value on the stack
      else if (@mapped_value like '%@%')
      {
         replace ossi variables
           where input_string = @mapped_value   
         |
         publish data 
           where mapped_value = @result_string  
      }
       */
      |
      save ossi data to cache
      where uc_cache_value = @mapped_value
      |
      publish data
      where mapped_value = @mapped_value
   }
   |
   publish data 
   where mapped_value = @mapped_value
}

]]>
</local-syntax>
<documentation>

<remarks>
This command may be used to get mapped values from here to receipient. The source value will be multi part
separated by |.  The data in policy could use wild cards
</remarks>

<retcol name="sys_grp_id" type="String"></retcol>

</documentation>
</command>